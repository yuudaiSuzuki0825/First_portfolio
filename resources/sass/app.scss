@charset "utf-8";

html {
    // 各タグのfont-sizeはremで調整すること。
    font-size: 100%;
}

body {
    // コーディングしやすくするために行間を1にしておいた。
    line-height: 1;
    // 背景色の指定。
    background-image: linear-gradient(135deg, rgba(105, 234, 203, 1), rgba(215, 98, 252, 1) 67%, rgba(102, 84, 241, 1));
}

a {
    // リンクの下線を消しておく。
    text-decoration: none;
    // 色指定
    color: #333333;
}

ul {
    // liの左点の削除。
    list-style: none;
}

// 画像を使用する場合は必須。
img {
    max-width: 100%;
}

// .wrapper {
//     padding-bottom: 50px;
//     background-image: linear-gradient(135deg, rgba(105, 234, 203, 1), rgba(215, 98, 252, 1) 67%, rgba(102, 84, 241, 1));
//     position: relative;
//     // z-index: 10;
// }

// .header {
//     width: 1400px;
//     max-width: 95%;
//     margin: 0 auto;
//     padding: 30px 0;
//     display: flex;
//     justify-content: space-between;
//     // background-color: #333333;
// }

// .header-title {
//     font-size: 1.875rem;
//     letter-spacing: 3px;
//     font-family: 'Abril Fatface', cursive;
// }

// .header-title a {
//     color: #333333;
// }

// .header-title a:hover {
//     transform: scale(1.1);
//     color: #CC0000;
// }

// .toggle-menu-button {
//     display: none;
// }

// .header-site-menu ul {
//     display: flex;
// }

// .header-site-menu ul li {
//     margin-left: 20px;
//     margin-top: 10px;
//     font-size: 1rem;
//     letter-spacing: 3px;
//     font-family: 'Abril Fatface', cursive;
// }

// /*
// .header-site-menu ul li:hover {
//     transform: scale(1.2);
// }
// */

// .header-site-menu a {
//     color: #333333;
// }

// .header-site-menu a:hover {
//     transform: scale(1.2);
//     color: #CC0000;
// }

// // お試し
// .parent-balloon {
//     // .balloon（子要素）でposition: absolute;を使用するため。
//     position: relative;
// }

// // お試し
// .parent-balloon .balloon {
//     position: absolute;
//     top: -30px;
//     left: -20px;
//     display: none;
//     padding: 7px;
//     color: white;
//     background-color: #444444;
//     border-radius: 5px;
//     box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);
// }

// // お試し
// .parent-balloon .balloon::before {
//     content: "";
//     position: absolute;
//     top: 97%;
//     left: 20px;
//     border: 6px solid transparent;
//     border-top: 6px solid #444444;
// }

// // お試し
// .parent-balloon:hover .balloon {
//     display: inline-block;
//     width: 78px;
// }

// .main-top {
//     font-family: 'Abril Fatface', cursive;
//     text-align: center;
//     position: relative;
// }

// .main-top img {
//     width: 100%;
//     object-fit: cover;
//     object-position: center 10%;
//     height: 350px;
// }

// .title-area {
//     padding-left: 22%;
//     position: absolute;
//     top: 130px;
//     left: 0;
// }

// .main-title {
//     font-size: 1.875rem;
//     letter-spacing: 3px;
//     color: #ffffff;
//     text-shadow: 2px 2px 2px #333333;
// }

// .main-sub-title {
//     margin-top: 20px;
//     font-size: 1rem;
//     letter-spacing: 1px;
//     color: #ffffff;
//     text-shadow: 2px 2px 1px #AAAAAA;
// }

// .error-message {
//     color: #CC0000;
//     font-size: 0.875rem;
//     margin-bottom: 10px;
// }

// .flex {
//     padding: 50px 2.5% 0;
//     display: flex;
//     justify-content: space-between;
// }

// .content {
//     width: 72%;
//     background-color: white;
//     background-image: linear-gradient(0deg, transparent calc(100% - 1px), #F5F5F5  calc(100% - 1px)),
//         linear-gradient(90deg, transparent calc(100% - 1px), #F5F5F5 calc(100% - 1px));
//     background-size: 16px 16px;
//     background-repeat: repeat;
//     background-position: center center;
//     padding: 12px 15px;
//     border-radius: 1.5%;
// }

// .content-title {
//     font-size: 1.875rem;
//     margin-bottom: 15px;
// }

// .table {
//     border-collapse: collapse;
//     border-spacing: 0;
//     width: 100%;
// }

// .table th {
//     border-bottom: solid 1px #333333;
// }

// .table td {
//     border-bottom: solid 1px #333333;
//     padding: 10px;
// }

// .table th:nth-of-type(1) {
//     width: 3%;
// }

// .table th:nth-of-type(2) {
//     width: 25%;
// }

// .table th:nth-of-type(3) {
//     width: 4%;
// }

// .table th:nth-of-type(4) {
//     width: 4%;
// }

// .table th:nth-of-type(5) {
//     width: 65%;
// }

// .pencil {
//     font-size: 1.4rem;
//     color: #333333;
// }

// .pagination {
//     margin-top: 15px;
//     text-align: center;
// }

// .pagination .page-item {
//     display: inline-block;
//     font-size: 1.2rem;
//     padding: 0 5px;
// }

// .pagination .page-item .page-link {
//     color: #333333;
// }

// .pagination .page-item .page-link:hover {
//     border-bottom: solid 2px #333333;
// }

// .pagination .active .page-link {
//     color: #AAAAAA;
// }

// .form {
//     width: 100%;
// }

// .form-label {
//     display: block;
// }

// .form-input {
//     display: block;
//     width: 100%;
//     margin: 10px 0;
//     border: solid 1px #333333;
//     padding: 4px 8px;
// }

// .form-btn {
//     display: block;
//     width: 100%;
//     color: #ffffff;
//     background-color: #333333;
//     text-align: center;
//     margin-top: 16px;
//     padding: 10px 0;
//     border-radius: 5px;
// }

// .delete {
//     width: 100%;
// }

// .delete-btn {
//     display: block;
//     width: 100%;
//     color: #ffffff;
//     background-color: #FFD700;
//     text-align: center;
//     padding: 10px 0;
//     border-radius: 5px;
//     margin-top: 8px;
// }

// .sidebar {
//     width: 25%;
//     height: 300px;
//     background-color: #ffffff;
//     padding: 15px;
// }

// .usage-area dt {
//     font-size: 1.875rem;
//     letter-spacing: 3px;
//     font-family: 'Abril Fatface', cursive;
// }

// .usage-area dd {
//     margin-top: 20px;
//     letter-spacing: 1px;
//     line-height: 1.4;
// }

// /*
// .make-btn {
//     display: inline-block;
//     margin-top: 20px;
//     font-size: 1rem;
//     font-family: 'Abril Fatface', cursive;
// }
// */

// /*
// .make-btn:hover {
//     transform: scale(1.2);
// }
// */

// .go-to-top-parent {
//     display: none;
// }

// .go-to-top {
//     position: fixed;
//     bottom: 9px;
//     right: 20px;
//     color: #ffffff;
//     background-color: #333333;
//     padding: 10px 20px;
// }

// #footer p {
//     text-align: center;
//     font-size: 0.875rem;
//     font-family: 'Abril Fatface', cursive;
//     padding: 20px 0;
// }

// @media (min-width: 768px) and (max-width: 1200px) {
//     .flex {
//         flex-direction: column;
//     }

//     .content {
//         width: 100%;
//     }

//     .sidebar {
//         width: 100%;
//         height: 220px;
//         margin-top: 50px;
//     }

//     .title-area {
//         padding-left: 7%;
//     }
// }

// @media (max-width: 768px) {
//     .wrapper {
//         padding-bottom: 30px;
//     }

//     .header {
//         position: relative;
//     }

//     .header-site-menu {
//         position: absolute;
//         top: 100%;
//         left: 0;
//         display: none;
//         z-index: 20;
//     }

//     .header-site-menu.is-show {
//         display: block;
//     }

//     .header-site-menu a {
//         color: #ffffff;
//         font-size: 1.5rem;
//     }

//     .header-site-menu a:hover {
//         color: #CC0000;
//     }

//     .toggle-menu-button {
//         display: block; /* buttonタグはデフォでinline-block。*/
//         width: 44px;
//         height: 34px;
//     }

//     .main-top {
//         position: relative;
//         z-index: 10;
//     }

//     .title-area {
//         padding-left: 4%;
//         padding-right: 4%;
//     }

//     .flex {
//         flex-direction: column;
//         padding-top: 30px;
//     }

//     .content {
//         width: 100%;
//     }

//     .sidebar {
//         width: 100%;
//         height: 220px;
//         margin-top: 30px;
//     }

//     #footer p {
//         padding: 10px 0;
//     }
// }

// ヘッダーここから。

.header {
    // 最大幅を指定している。これ以上大きくならない。
    width: 1400px;
    // ウィンドウ幅に対して95%分の範囲が横幅になる。
    // widthで最大幅，max-widthで最大％を指定することで，
    // 例えばウィンドウ幅の95%の長さが1400pxを超えた場合，横幅は1400pxとなり超過分はmarginになる。
    // 例えばウィンドウ幅の95%の長さが1400pxを下回る場合，その95%分の値が横幅になる。
    max-width: 95%;
    // 中央寄せ。
    margin: 0 auto;
    // フレックス。
    display: flex;
    padding: 8px;
}

.header .header-title {
    transition: transform .2s;
}

.header .header-title:hover {
    transform: scale(1.1);
}

.header .header-title a {
    // html{font-size: 100%;}を指定した後，各タグでremを用いてpx指定する。
    // html{font-size: 100%;}は16pxを表すので以下の指定は16×1.875=30pxとなる。
    font-size: 1.875rem;
    // 行間の指定。
    line-height: 56px;
    // 文字間の隙間指定。
    letter-spacing: 3px;
    // 色指定
    color: #333333;
}

.header .header-site-menu {
    // marginはリセットCSSによりデフォで0。marginをautoにすると取りうる範囲の限界まで空白を占有してくれる。
    // margin-rightは0なので結果として右端にナビゲーションリンクがくっつくまでmargin-leftの範囲が大きくなる＝右寄せになる。
    // 実際の挙動を確認して。
    margin-left: auto;
}

.header .header-site-menu nav ul {
    // フレックス。
    display: flex;
    line-height: 56px;
    // フレックスアイテムの交差軸に対して中央寄せ。フレックスアイテムは主軸は横。
    // すなわち，縦軸に対して中央に配置される。
    align-items: center;
}

.header .header-site-menu nav ul li {
    // 22pxと同じ。16×1.375。
    font-size: 1.375rem;
}

// 隣接兄弟結合子。MDN参照。
.header .header-site-menu nav ul li + li {
    // 各アイコンの隙間を作成。
    margin-left: 55px;
}

// ナビゲーションリンクのツールチップの指定。
.header .header-site-menu nav ul li .parent-balloon .header-balloon {
    // 位置指定のため。.parent-balloon{}参照。
    position: absolute;
    top: 30px;
    left: -28px;
    // 通常は表示されないようにしている。
    display: none;
    padding: 7px;
    // 16pxと同じ。16×1。
    font-size: 1rem;
    // 行間を無しにしている。何故か「作成する」以外のツールチップにて行間が掛かっていたので解除している（コメントアウトして確認してほしい）。
    // 推測➡.header .header-site-menu nav ul{}のline-height: 56px;を継承していたから？
    line-height: 1;
    // 太字の解除をしている。何故か「作成する」ツールチップだけテキストが太字になっていた…（コメントアウトして確認してほしい）。
    font-weight: normal;
    color: white;
    background-color: #444444;
    border-radius: 5px;
    // 影指定。
    box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);
}

// ナビゲーションリンクの各アイコンをホバーするとツールチップが表示されるようにしている。
.header .header-site-menu nav ul li .parent-balloon:hover .header-balloon {
    display: inline-block;
    // 横幅の指定。コメントアウトして確認。
    width: 78px;
}

// 「FAQ」ツールチップだけ別の指定にしている（位置の調整などの点で特別な指定が必要だった）。コメントアウトして確認を。
.header .header-site-menu nav ul li .parent-balloon:hover .header-balloon.second {
    left: -12px;
    width: 48px;
}

.header .header-site-menu .header-hamburger-menu {
    // PC画面では非表示にするため。SP画面では表示させる。
    display: none;
    // ハンバーガーメニューボタンを右寄せにするため。
    margin-left: auto;
}

.header .header-site-menu .header-hamburger-menu #open {
    // 30pxと同じ。16×1.875。
    font-size: 1.875rem;
    // margin-topを指定するために変更した。
    display: inline-block;
    margin-top: 10px;
    cursor: pointer;
}

.header .overlay {
    // マスク部分の作成。position: fixed;とtop,bottom,right,left: 0;で作成できる。
    position: fixed;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    // マスク部分の背景指定。
    background: rgba(255,255,255,0.9);
    // マスク部分のナビゲーションリンクを中央寄せ。
    text-align: center;
    padding: 64px;
    // 要素の重なり順を指定している。一度コメントアウトして挙動確認を。「編集する」ボタンのアイコンがマスク部分の上に乗ってしまいアクセスできてしまう（htmlの構造上の問題だと思われる，下にあるタグが上に重なる仕様？）。
    z-index: 10;
    // ハンバーガーメニューボタンがクリックされるまでは完全透明にすることで見えないようにしている。
    opacity: 0;
    // ポインターイベントをnoneにすることで，マスク部分のナビゲーションリンクに対してクリックなどの操作を行えないようにしている。
    // htmlのタグ配置的にはマスク部分のナビゲーションリンクの方が上に重なるが，「完全に透明化andクリックできない」によってあたかもそこにないようにしている。
    // 一方でdisplay:none;ではないのでNodeツリーから消去されているわけではない。
    // よって，変化前（完全透明andクリックできない）と変化後（不透明andクリックできる，.header .overlay.show{}参照）の状態を維持できるのでtransitionを活用したアニメーションを実装できる。
    pointer-events: none;
    // アニメーションの指定。
    transition: opacity .4s;
}

.header .overlay.show {
    opacity: 1;
    /* autoが初期値。基本的にはnoneかauto。 */
    pointer-events: auto;
}

.header .overlay #close {
    /* 親要素にposition: relative;をあえて指定しないでabsoluteを使うと，包含ブロックを基準に位置が決定される。すなわち，ウィンドウ幅全体に対して位置が決定される。 */
    /* よって，以下の指定はページ全体を基準に絶対値指定している。 */
    position: absolute;
    top: 16px;
    right: 16px;
    // 32pxと同じ。16×2。
    font-size: 2rem;
    cursor: pointer;
}

.header .overlay nav ul li {
    font-size: 1.375rem;
}

.header .overlay nav ul li + li {
    margin-top: 40px;
}

.header .overlay nav ul li a i {
    padding-right: 5px;
}

// ヘッダーここまで。

// メインコンテンツここから。

// .wrapper {
// }

.wrapper .main-area {
    background-color: rgb(238, 238, 238, 0.9);
    display: flex;
    padding: 50px 0;
}

.wrapper .main-area #left-panel {
    /* 横幅の指定。 */
    width: 200px;
    // 高さの指定。
    height: 300px;
    /* 内側の余白。 */
    padding: 20px;
    /* 色指定。 */
    background-color: #333;
    color: #fff;
    // 角丸の指定。
    border-top-right-radius: 50px;
    border-bottom-right-radius: 50px;
    /* 影の指定。 */
    box-shadow: inset 0 0 5px 5px rgb(32, 31, 31);
    display: none;
}

.wrapper .main-area #left-panel.open {
    display: block;
}

.wrapper .main-area .content {
    display: flex;
    position: relative;
    // .contentの領域を広げるため。コメントアウトして確認。
    width: 100%;
    // 高さの最小値を指定。サイドパネルの高さと同じにした。これにより，計画数が少なくてもcontent部分の高さが300px以下になることはない。
    min-height: 300px;
}

.wrapper .main-area .content #left-panel-button {
    position: absolute;
    top: 127.74px;
    left: 0;
    cursor: pointer;
    /* 高さ指定。 */
    height: 36px;
    /* ボーダーの指定。border-leftはいらないのでnoneにしている。 */
    border-radius: 0 10px 10px 0;
    color: #ffffff;
    background-color: #333333;
    box-shadow: inset 0 0 5px 5px rgb(32, 31, 31);
}

.wrapper .main-area .content #left-panel-button i {
    /* marginやpaddingを指定できるようにするため。 */
    display: inline-block;
    /* アイコンなのでfont-sizeで大きさ指定を行う。 */
    font-size: 24px;
    /* 余白にてポジションの微調整。 */
    margin-right: 2px;
    padding-top: 6px;
    padding-bottom: 6px;
    // アニメーションの調整。
    transition: transform .2s;
}

.wrapper .main-area .content #left-panel-button.open i {
    transform: rotate(180deg);
}

.wrapper .main-area .content .content-area {
    // 親要素（.content）に対して92%を横幅に指定。
    width: 92%;
    // 親要素（.content）に対して8%をmarginに指定。左右均等に割り振った。
    margin: 0 4%;
    padding-bottom: 10px;
    border-radius: 10px;
}

.wrapper .main-area .content .content-area .tabMenu {
    display: flex;
}

.wrapper .main-area .content .content-area .tabMenu .planListTitle {
    margin-left: 15px;
}

.wrapper .main-area .content .content-area .tabMenu .planListTitle a {
    display: block;
    // ユーザーの範囲選択操作を不可能にしている。つまりコピーできない。
    user-select: none;
    padding: 8px 7px 5px;
    background-color: #fff;
    color: #333333;
    border-radius: 8px 8px 0 0;
    letter-spacing: .4rem;
    // badgeのpositionプロパティのため。
    position: relative;
}

// 各タブメニューがホバーされた時のアイコンのアニメーション指定。
.wrapper .main-area .content .content-area .tabMenu .planListTitle a:hover i {
    transform: rotate(-360deg);
    // 以下の指定をhover側に書くことで，ホバーが外れた時にはtransitionが読み込まれないようにした。
    // こうすることでホバーが外れた際のアニメーションのイージングが0sになる。よって，一切回転していないように見える。
    transition: transform .5s;
}

// 以下の指定をすることで，クリックされた時にはアイコンのアニメーションが起こらないように制御している。一度以下の指定をコメントアウトして確認を。
.wrapper .main-area .content .content-area .tabMenu .planListTitle a:active i {
    // activeはクリック中。
    transition: none;
    transform: none;
}

// 以下の指定で，選択済みのタブメニューをホバーしてもアイコンのアニメーションが起こらないようになった。
.wrapper .main-area .content .content-area .tabMenu .planListTitle.active a:hover i {
    transform: none;
}

.wrapper .main-area .content .content-area .tabMenu .planListTitle.active a {
    background-color: #333333;
    color: #fff;
}

.wrapper .main-area .content .content-area .tabMenu .planListTitle a .badge {
    position: absolute;
    top: -10px;
    left: calc(100% - 10px);
    display: inline-block;
    // バッチの件数の可変に対応させるため。
    width: auto;
    border-radius: 50%;
    background-color: #FF4A52;
    color: white;
    // 左右の内側の余白を指定。
    padding: 0 4px;
    // htmlのfont-size: 100%;（多分16px）とセット。フォントサイズはremで指定すること。
    font-size: .875rem;
    // フォントサイズに1.4倍した値が高さとなる。今回heightの代わりとして使用している。
    line-height: 1.4;
    // 親要素の方で値を指定していたので上書きするため。
    letter-spacing: normal;
    // バッチが隣のタブメニューと重なった際に必ず上に来るように指定した。念のため。
    z-index: 10;
}

/* エラーメッセージ。*/
.wrapper .main-area .content .content-area .error-message {
    position: absolute;
    top: -42px;
    left: 62px;
    background-color: #FF4A52;
    color: #FFFAFB;
    padding: 5px;
    border-radius: 3px;
    text-align: center;
    font-size: 1rem;
    user-select: none;
    letter-spacing: 3px;
    box-shadow: inset 0 0 5px 5px #FF4A60;
}

.wrapper .main-area .content .content-area .provisional {
    background-color: #333333;
    color: #fff;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    padding: 10px;
    user-select: none;
    letter-spacing: 3px;
}

/* 「検索」フォーム。　*/
.wrapper .main-area .content .content-area form {
    background-color: #333333;
    color: #fff;
    // 上の「並び替え（暫定）」ボタンの方に角丸の指定を移した。
    // border-top-left-radius: 8px;
    // border-top-right-radius: 8px;
    padding: 0 10px 10px;
    user-select: none;
    letter-spacing: 3px;
}

.wrapper .main-area .content .content-area form label {
    font-size: 1.125rem;
}

.wrapper .main-area .content .content-area form input {
    width: 300px;
    background-color: #FFFAFB;
    color: #333;
    padding: 5px;
    border-radius: 4px;
}

.wrapper .main-area .content .content-area form button {
    color: #fff;
    transition: transform .2s;
    letter-spacing: 3px;
    font-size: 1.125rem;
    margin-left: 5px;
}

.wrapper .main-area .content .content-area form button:not(.parent-balloon):hover {
    transform: scale(1.1);
}

.wrapper .main-area .content .content-area .tr .FirstAid form {
    background-color: #555555;
    padding: 0;
    letter-spacing: normal;
}

.wrapper .main-area .content .content-area .tr .FirstAid form button {
    font-size: 1rem;
    margin-left: 0;
}



// ここからスタート。いよいよリストのコーディング（正念場）。終わり次第，全てのページにおいても新デザインを適用できるようHTMLの構造整理を行う。
// 次にアコーディオンの実装。各planの概要をアコーディオンで隠す機能を追加したい。
// その後でコメントを付ける作業。
.wrapper .main-area .content .content-area .table {
    background-color: #333333;
    color: #fff;
    border-radius: 0 0 8px 8px;
    width: 100%;
    padding: 0 10px 10px;
}

.wrapper .main-area .content .content-area .table tbody tr {
    display: flex;
    background-color: #555555;
    border-radius: 4px;
    padding: 5px;
    letter-spacing: 2px;
    // アニメーションの微調整。
    // transition: transform .2s;
}

/* trタグをホバーすると少し大きくなるアニメーションを実装しようと思ったが，ツールチップも合わさると鬱陶しく感じられたので今回は無しとした。　*/
// .wrapper .main-area .content .content-area .table tbody tr:hover {
//     transform: scale(1.005);
// }

.wrapper .main-area .content .content-area .table tbody tr + tr {
    margin-top: 15px;
}

// JavaScript。アコーディオン。
.wrapper .main-area .content .content-area .table tbody .tr.detailOpen {
    border-radius: 4px 4px 0 0;
}

.wrapper .main-area .content .content-area .table tbody #planDetailRow {
    margin-top: 0;
    // 自動的に改行を挿入するために使用。コメントアウトして確認して。
    word-break: break-all; // overflow-wrap: anywhere;でもOK。
    display: none;
    border-radius: 0 0 4px 4px;
    border-top: #ffffff solid 1px;
    line-height: 1.5;
    animation: .2s slideDown;
}

.wrapper .main-area .content .content-area .table tbody #planDetailRow.detailOpen {
    display: block;
}

.wrapper .main-area .content .content-area .table tbody tr td {
    // display: block;
    /* テキストの位置調整。フレックスにするが縦並びに変更し，主軸に対して中央に配置している。*/
    /* これにより，テキストがど真ん中に配置される形になる（微々たる変化，気にならなければ「display: block;」に戻してOK）。*/
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.wrapper .main-area .content .content-area .table tbody tr td + td {
    margin-left: 45px;
}

// 応急処置。trace.blade.phpはtdの数の関係で空タグのtd（class="FirstAid"）を追加する必要があった。
.wrapper .main-area .content .content-area .table tbody tr #modalWindowOpen {
    margin-left: 0px;
}

.wrapper .main-area .content .content-area .table tbody tr #planDetailButton {
    margin-left: auto;
    cursor: pointer;
}

.wrapper .main-area .content .content-area .table tbody tr #planDetailButton:hover .balloon {
    width: 50px;
}

// アコーディオンのアイコンのアニメーション。
.wrapper .main-area .content .content-area .table tbody .tr #planDetailButton i {
    transition: transform .2s;
}

// アコーディオンのアイコンのアニメーション。
.wrapper .main-area .content .content-area .table tbody .tr.detailOpen #planDetailButton i {
    transform: rotate(180deg);
}

.wrapper .main-area .content .content-area .table tbody tr td a {
    display: inline-block;
    color: #fff;
}

// お試し。ツールチップ。
.parent-balloon {
    // .balloon（子要素）でposition: absolute;を使用するため。
    position: relative;
}

// お試し。ツールチップ。
.parent-balloon .balloon {
    position: absolute;
    top: -30px;
    left: -20px;
    display: none;
    padding: 7px;
    letter-spacing: normal;
    color: #444444;
    background-color: #ffffff;
    border-radius: 5px;
    box-shadow: 2px 2px 2px 1px #333333;
}

// お試し。ツールチップ。
.parent-balloon .balloon::before {
    content: "";
    position: absolute;
    top: 97%;
    left: 20px;
    border: 6px solid transparent;
    border-top: 6px solid #ffffff;
}

// お試し。ツールチップ。
.parent-balloon:hover .balloon {
    display: inline-block;
    width: 78px;
}

.wrapper .main-area .content .content-area .alt {
    background-color: #333333;
    color: #fff;
}

.wrapper #to_top {
    position: fixed;
    bottom: 10px;
    right: 10px;
    color: #333333;
    background-color: #fff;
    // アイコンの型抜き。コメントアウトして確認してみてほしい。
    border-radius: 50%;
    opacity: 0;
    transition: opacity .3s;
}

.wrapper #to_top.scrolled {
    opacity: 1;
}

.wrapper #to_top i {
    font-size: 2rem;
}

// モーダルウインドウ部分のコーディング。一か所にまとめてある。
.wrapper #mask {
    background: rgba(0, 0, 0, 0.4);
    // positionをfixedに，topとleft,right,bottomを全て0にすることでマスク部分を作っている。
    position: fixed;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    z-index: 50;
}
.wrapper #mask.hidden {
    display: none;
}

// 「完了する」ボタン（ダミー）がクリックされた後。
.wrapper #modalWindow {
    background: #fff;
    width: 300px;
    padding: 20px;
    border-radius: 4px;
    // fixedを指定。親要素（厳密には包含ブロック）はページ全体となる。
    position: fixed;
    top: 100px;
    left: 0;
    right: 0;
    /* width，left，rightの全てがautoでなく（leftとrightは0），かつmargin-right，margin-leftがともにautoである場合には，左右のmarginが等しくなるようにmarginが設定される，らしい（CSSの仕様）。 */
    /* この際，topは左右と関係ないのでどのような値であっても問題なし。 */
    margin: 0 auto;
    z-index: 100; // モーダルウインドウ部分を一番上に配置するため。
    display: block;
}
//「完了する」ボタン（ダミー）がクリックされる前。
.wrapper #modalWindow.hidden {
    display: none;
}
.wrapper .main-area .content .content-area #modalWindow div {
    display: flex;
}
.wrapper .main-area .content .content-area #modalWindow p {
    margin-bottom: 15px;
    letter-spacing: 2px;
    color: #333;
}
.wrapper .main-area .content .content-area #modalWindow div span {
    display: block;
    margin-left: auto;
    padding: 6px;
    color: #333;
    background-color: #E8F2F0;
    border-radius: 4px;
    font-size: 1rem;
    letter-spacing: normal;
    cursor: pointer;
}
.wrapper .main-area .content .content-area #modalWindow div form {
    padding: 0; // 別のformタグのスタイル指定を取り消すため。
    background-color: #FF4A52;
    border-radius: 4px;
    margin-left: 14px;
}
.wrapper .main-area .content .content-area #modalWindow div form button {
    color: #fff;
    letter-spacing: normal;
    padding: 6px;
    font-size: 1rem;
    margin: 0;
}
.wrapper .main-area .content .content-area #modalWindow div form button:hover {
    transform: none;
}
.wrapper #modalWindowOpen {
    cursor: pointer;
}
.wrapper #modalWindowOpenButton {
    cursor: pointer;
}

// モーダルウインドウ部分ここまで。

@keyframes slideDown {
    0% {
        transform: translateY(-10px);
        opacity: 0;
    }
    100% {
        transform: none;
        opacity: 1;
    }
}

// メインコンテンツここまで。

@media (max-width: 600px) {
    .header .header-site-menu nav ul {
        // SP画面では非表示にする。
        display: none;
    }

    .header .header-site-menu .header-hamburger-menu {
        // SP画面ではハンバーガーメニューボタンを表示させる。
        display: block;
    }
}