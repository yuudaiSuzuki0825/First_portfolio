@charset "utf-8";

// ＊scssにおいて，「//」を使ってコメントアウトするとcssファイルにコンパイルした際に，コメントがソースから消える‼

// 変数の定義は以下に…。

// 黒色の指定。
$black_333333: #333333;

// 16px×1.875=30px。html{}
$fontSize_30px: 1.875rem;

// 16px×1.375=22px。html{}を参照。
$fontSize_22px: 1.375rem;

// （追記）ツールチップの指定をまとめておきたい。

// ナビゲーションリンクのツールチップのスタイル指定を以下にまとめた。
@mixin header-balloon {
    // 位置指定のため。.parent-balloon{}参照。
    position: absolute;
    top: 30px;
    left: -28px;
    // 通常は表示されないようにしている。
    display: none;
    padding: 7px;
    // 16pxと同じ。16px×1。html{}参照。
    font-size: 1rem;
    // 行間を無しにしている。何故か「作成する」以外のツールチップにて行間が掛かっていたので解除している（コメントアウトして確認してほしい）。
    // 推測➡.header .header-site-menu nav ul{}のline-height: 56px;を継承していたから？
    line-height: 1;
    // 太字の解除をしている。何故か「作成する」ツールチップだけテキストが太字になっていた…（コメントアウトして確認してほしい）。
    font-weight: normal;
    color: white;
    background-color: #444444;
    border-radius: 5px;
    // 影指定。
    box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);
}

// その他便利なSCSSの記法について↓↓↓
// ・例えば，「$imgDir: "../img/";」のように定義しておいて，「background: url($imgDir + "bg.png");」と記述することも可能。
// ないしは，「background: url("#{$imgDir}bg.png")」でも可（文字列の中で変数を展開するパターン，テンプレートリテラルみたい）。

// ・scssの組み込み関数で適宜利用しよう。lighten()など。

// ・@ifで条件分岐が出来る。
// 例）
// $debugMode: true;
// #main {
//     @if $debugMode == true {
//         color: red;　　// trueならこちらが適用される。
//     } @else {
//         color: green;　　// 上記以外（false）ならこちらが適用される。
//     }
// }

// ・@forや@whileでループ分を作ることも出来る。

// ・リスト（配列？）と@eachも利用できる。
// 例）
// $colors: black, white, red;
// @each $color in $colors {
//     .#{$color}-image {
//         color: $color;
//     }
// }
// ＊（追記）@each $color in black, white, red {} でも同じ意味になる（リストの中身が短いときは便利）。

// ・関数を作って呼び出すことも出来る（デバック機能もある）。

// ・ファイル分割が出来るが，@importではなく@useを代わりに用いること（前者は廃止される，sassのバージョン確認）。

// ・@mixinと@extend（継承）も試してみよう。


html {
    // ここで100%と指定し，各タグではremを使ってfont-sizeの調整を行うこと。
    font-size: 100%;
}

body {
    // コーディングしやすくするために行間を1にしておいた。
    line-height: 1;
    // 背景色の指定。.wrapper .main-area{}のbackground-colorにも注目。メインエリアではこの背景色の上に半透明の白色背景を上に重ねている。
    background-image: linear-gradient(135deg, rgba(105, 234, 203, 1), rgba(215, 98, 252, 1) 67%, rgba(102, 84, 241, 1));
}

a {
    // リンクの下線を消しておく。
    text-decoration: none;
    // 色指定
    // SCSSの組み込み関数（lighten()）。
    color: lighten($black_333333, 10%);
}

ul {
    // liの左点の削除。
    list-style: none;
}

// 画像を使用する場合は必須。画像を表示させた上で以下をコメントアウトして確認してほしい。
// 画像サイズがウィンドウ幅を超える大きさの時に真価を発揮する。
img {
    max-width: 100%;
}

// ヘッダー。

.header {
    // 最大幅を指定している。これ以上大きくならない。
    width: 1400px;
    // ウィンドウ幅に対して95%分の範囲が横幅になる。
    // widthで最大幅，max-widthで最大％を指定することで，
    // 例えばウィンドウ幅の95%分の長さが1400pxを超えた場合，横幅は1400pxとなり超過分はmarginになる。
    // 例えばウィンドウ幅の95%分の長さが1400pxを下回る場合，その95%分の値が横幅になる。
    max-width: 95%;
    // 中央寄せ。
    margin: 0 auto;
    // フレックス。
    display: flex;
    // scss記法の練習。8pxと同じ意味。#{}について調べておくこと。
    padding: #{4 + 4}px;

    // sass/scssの入れ子構造。
    // タイトルをホバーすると少し拡大表示されるアニメーションのカスタマイズ。変化スピードの調整。
    // 「&」はSCSSの記法。親要素のセレクタ名が入る。今回は「.header」が入る。
    &-title {
        // アニメーションのイージング指定。
        transition: transform .2s;

        // タイトルがホバーされた時（「.header-title:hover」と同じ意味になる）。
        &:hover {
            // 拡大表示する指定をしている。
            transform: scale(1.1);
        }

        a {
            // html{font-size: 100%;}を指定した後，各タグでremを用いて指定すること。
            // 例）html{font-size: 100%;}は16pxを表すので以下の指定は16×1.875=30pxとなる。
            // 変数の定義参照。
            font-size: $fontSize_30px;
            // 行間の指定。
            line-height: 56px;
            // 文字間の隙間指定。
            letter-spacing: 3px;
            // 色指定
            color: $black_333333;
        }
    }

    // 「&」はSCSSの記法。親要素のセレクタ名が入る。今回は「.header」が入る。
    &-site-menu {
        // marginはリセットCSSによりデフォで0。marginをautoにすると取りうる範囲の限界まで空白を占有してくれる。
        // margin-rightは0なので結果として右端にナビゲーションリンクがくっつくまでmargin-leftの範囲が大きくなる➡右寄せになる。
        // 実際の挙動を確認して。
        margin-left: auto;

        nav ul {
            // フレックス。横並びを実現。
            display: flex;
            // 行間を指定。
            line-height: 56px;
            // フレックスアイテムの交差軸に対して中央寄せ。フレックスアイテムは主軸は横。
            // すなわち，縦軸に対して中央に配置される。
            // ＊以下の指定の意味ないかも…。
            align-items: center;

            li {
                // 変数の定義参照。
                font-size: $fontSize_22px;

                .parent-balloon {

                    .header-balloon {
                        // ミックスイン。header-balloonでまとめたスタイルを呼び出した。
                        @include  header-balloon;
                    }

                    // ナビゲーションリンクの各アイコンをホバーするとツールチップが表示されるようにしている。
                    &:hover {

                        .header-balloon {
                            // ミックスイン。header-balloonでまとめたスタイルを呼び出した。
                            @include  header-balloon;
                            display: inline-block;
                            // 横幅の指定。コメントアウトして確認。
                            width: 78px;
                        }

                        // 「FAQ」ツールチップだけ別の指定にしている（位置の調整などの点で特別な指定が必要だった）。コメントアウトして確認を。
                        .header-balloon.second {
                            // ミックスイン。header-balloonでまとめたスタイルを呼び出した。
                            @include  header-balloon;
                            display: inline-block;

                            // ここから本命の指定。
                            left: -12px;
                            width: 48px;
                        }
                    }
                }
            }

            // 隣接兄弟結合子。
            li + li {
                // 各アイコンの隙間を指定している。先頭のliにはmargin-leftの指定をしていない。
                margin-left: 55px;
            }
        }

        .header-hamburger-menu {
            // PC画面では非表示にするため。SP画面では表示させる。
            display: none;
            // ハンバーガーメニューボタンを右寄せにするため。
            margin-left: auto;

            #open {
                // 30pxと同じ。16px×1.875。html{}参照。
                font-size: 1.875rem;
                // margin-topを指定するために変更した。
                display: inline-block;
                margin-top: 10px;
                // ホバー時のマウスの形を指定している。
                cursor: pointer;
            }
        }
    }

    .overlay {
        // マスク部分の作成。position: fixed;とtop,bottom,right,left: 0;で作成できる。
        position: fixed;
        top: 0;
        bottom: 0;
        right: 0;
        left: 0;
        // マスク部分の背景指定。
        background: rgba(255,255,255,0.9);
        // マスク部分のナビゲーションリンクを中央寄せ。
        text-align: center;
        padding: 64px;
        // 要素の重なり順を指定している。一度コメントアウトして挙動確認を。「編集する」ボタンのアイコンがマスク部分の上に乗ってしまいアクセスできてしまう（htmlの構造上の問題だと思われる，下にあるタグが上に重なる仕様）。
        z-index: 1000; // ここの値は適当。上に重ねるタグにより大きい値を指定すれば大丈夫。
        // ハンバーガーメニューボタンがクリックされるまでは完全透明にすることで見えないようにしている。
        opacity: 0;
        // ポインターイベントをnoneにすることで，マスク部分のナビゲーションリンクに対してクリックなどの操作を行えないようにしている。
        // htmlのタグ配置的にはマスク部分のナビゲーションリンクの方が上に重なるが，「完全に透明化andクリックできない」によってあたかもそこにないようにしている。
        // 一方でdisplay:none;ではないのでNodeツリーから消去されているわけではない。
        // よって，変化前（完全透明andクリックできない）と変化後（不透明andクリックできる，.header .overlay.show{}参照）の状態を維持できるのでtransitionを活用したアニメーションを実装できる。
        pointer-events: none;
        // アニメーションの指定。
        transition: opacity .4s;
    }
}

// SCSSここから。

.header .overlay.show {
    opacity: 1;
    /* autoが初期値。基本的にはnoneかauto。 */
    pointer-events: auto;
}

.header .overlay #close {
    /* 親要素にposition: relative;をあえて指定しないでabsoluteを使うと，包含ブロックを基準に位置が決定される。すなわち，ウィンドウ幅全体に対して位置が決定される。 */
    /* よって，以下の指定はページ全体を基準に絶対値指定している。 */
    position: absolute;
    top: 16px;
    right: 16px;
    // 32pxと同じ。16px×2。
    font-size: 2rem;
    // ホバー時のマウスの形の指定をしている。
    cursor: pointer;
}

.header .overlay nav ul li {
    // html{}参照。
    font-size: 1.375rem;
}

// 隣接兄弟結合子。
.header .overlay nav ul li + li {
    margin-top: 40px;
}

.header .overlay nav ul li a i {
    padding-right: 5px;
}

/* ヘッダーここまで。*/

/* メインコンテンツここから。*/

.wrapper .main-area {
    // 背景色の指定。body{}のbackground-imageと関連。
    background-color: rgb(238, 238, 238, 0.9);
    // サイドパネルとメインコンテンツを横並びに。
    display: flex;
    padding: 50px 0;
}

// サイドパネルのコーディング。
.wrapper .main-area #left-panel {
    // 横幅の指定。
    width: 30%;
    // 高さの指定。絶対値指定しないと，例えばレコード数が少ないときに縦に縮んでしまう。
    height: 580px;
    // 内側の余白。
    padding: 20px;
    /* 色指定。 */
    background-color: #333;
    color: #fff;
    // 角丸の指定。
    border-top-right-radius: 50px;
    border-bottom-right-radius: 50px;
    // 影の指定。
    box-shadow: inset 0 0 5px 5px rgb(32, 31, 31);
    // デフォルトでは非表示。アイコンボタンをクリックすると表示される。
    display: none;
}

// サイドパネルの計画作成欄のコーディングここから。
.wrapper .main-area #left-panel form .form-label {
    // 横幅一杯まで占有するため。
    display: block;
    // 範囲選択できなくしている。
    user-select: none;
    // 外側の余白指定。
    margin-top: 15px;
}
.wrapper .main-area #left-panel form .form-input {
    // 横幅一杯まで占有するため。
    display: block;
    // 横幅指定。絶対値の指定でも構わないが，概要欄が大きくなりすぎる可能性があるので親要素内に収める必要がある。デベロッパーツールで数値を変えて確認を。
    width: 100%;
    // 色指定。
    color: #fff;
    background-color: #555555;
    // 内側の余白指定。
    padding: 8px;
    // 角丸指定。
    border-radius: 4px;
    // 外側の余白指定。
    margin: 5px 0;
}
// プレースホルダーの色の変更をしている。「::placeholder」が必要。
.wrapper .main-area #left-panel form .form-input::placeholder {
    color: rgba(255,255,255,0.7);
}
// エラーメッセージ。
.wrapper .main-area #left-panel form .error-message {
    // 色指定。
    color: #FF4A52;
}
// 「作成する」ボタンのコーディング。
.wrapper .main-area #left-panel form .create-button {
    // 色指定。
    color: #fff;
    background-color: #5588BB;
    // 外側の余白指定。
    margin-top: 15px;
    // 内側の余白指定。
    padding: 8px;
    // 角丸指定。
    border-radius: 4px;
    // 範囲選択できなくしている。
    user-select: none;
}
// ここまでサイドパネルの計画作成欄のコーディング。

// サイドパネルのアイコンボタンがクリックされた時。
.wrapper .main-area #left-panel.open {
    // 非表示➡表示。
    display: block;
}

// メインコンテンツ。
.wrapper .main-area .content {
    // ポジショニングのため。エラーメッセージやモーダルウインドウのポジショニングでも使用。
    position: relative;
    // .contentの領域を広げるため。コメントアウトして確認。
    // （考察）↓
    // MDNに「row または row-reverse を選択した場合、主軸はインライン要素の並ぶ方向に伸びる軸となります。」との記述あり。
    // かといって.wrapper .main-area .content{}をブロックレベル要素にしても横幅全てを占有する性質とフレックスアイテムとしての性質は相容れないので
    // 横並びを実現するために後者が優先され，インライン要素としてのふるまいとなった。もし，占有できる最大の横幅（親要素内における最大幅）としてフレックスアイテムを設定したい場合はwidth: 100%;を指定する必要がある。
    // width: 100%;  // flex-grow: 1;を指定しない場合はこれをコメントアウトして。
    // 或いはflex-grow: 1;を指定してもOK。
    // 厳密には上記の考察は誤り？➡flex-basis: auto;（既定値）によってフレックスアイテムの横幅が設定されるが（具体的➡サイドパネルは上記より200px，コンテンツは絶対値指定なしなので最低限の横幅で設定？），分配可能な余白が右端に残る形となる。
    // その余白を各アイテムに分配するためのプロパティがflex-grow（余白の分配を割合で決定する）。既定値はflex-grow: 0;（サイドパネルにはこれが指定されている）で，コンテンツ側にflex-grow: 1;を指定すれば0:1（0:100）により残り全ての分配可能な余白がコンテンツ側の横幅として設定される形になる（width: 100%;と同じ挙動になる）。
    flex-grow: 1;
    // 高さの最小値を指定。サイドパネルの高さと同じにした。これにより，計画数が少なくてもcontent部分の高さが300px以下になることはない。
    min-height: 300px;
}
// サイドパネルボタンが押下された時。
.wrapper .main-area .content.open {
    // メインコンテンツの最大幅を指定している。これを指定しないとアコーディオンの開閉時に横幅の挙動がおかしくなる。コメントアウトして確認を。
    max-width: 68.7%;
}

// サイドパネルボタンのコーディング。
.wrapper .main-area .content #left-panel-button {
    // ポジショニング。
    position: absolute;
    // サイドパネルの約半分の高さの位置に来るように調整した。もう少し上手い方法を模索すべきだと思う。
    top: 127.74px;
    left: 0;
    // ホバーした時のマウスの形を変更した。
    cursor: pointer;
    // 高さ指定。
    height: 36px;
    // 色指定。
    color: #ffffff;
    background-color: #333333;
    // 角丸の指定。左側のみ角丸にしている。
    border-radius: 0 10px 10px 0;
    // 影の指定。
    box-shadow: inset 0 0 5px 5px rgb(32, 31, 31);
}

.wrapper .main-area .content #left-panel-button i {
    // 上下にpaddingの指定をするため。
    display: inline-block;
    /* アイコンなのでfont-sizeで大きさ指定を行う。1.5×16px=24px。 */
    font-size: 1.5rem;
    /* 余白にてポジションの微調整。 */
    margin-right: 2px;
    padding-top: 6px;
    padding-bottom: 6px;
    // アニメーションの調整（イージング）。
    transition: transform .2s;
}

// サイドパネルボタンのアイコンのアニメーション指定。ボタンがクリックされた時，以下が読み込まれる（app.jsのサイドパネルの実装を参照）。
.wrapper .main-area .content #left-panel-button.open i {
    // アイコンの向きが180度変化する。
    transform: rotate(180deg);
}

// コンテンツエリアのコーディング。
.wrapper .main-area .content .content-area {
    // 親要素（.content）に対して92%を横幅に指定。サイドパネルボタンはposition指定をしているので「宙に浮いている」扱い（サイドパネルボタン分の横幅を占有していないことになる，乗っかっているイメージ）。
    width: 92%;
    // 親要素（.content）に対して8%をmarginに指定。左右均等に割り振った。つまり，親要素のうち92%分がコンテンツエリアのwidthとして，8%分がそのmarginとして指定されている。
    margin: 0 4%;
    padding-bottom: 10px;
    // border-radius: 10px;　// 何故この指定を入れたのか分からない…。コメントアウトしても特に変化なかった。
}

// コンテンツエリアのタブメニューのコーディング。
.wrapper .main-area .content .content-area .tabMenu {
    // 各タブを横並びに。
    display: flex;
}

.wrapper .main-area .content .content-area .tabMenu .planListTitle {
    // 各タブの余白指定。
    margin-left: 15px;
}

.wrapper .main-area .content .content-area .tabMenu .planListTitle a {
    // 上下に余白を指定するため。
    display: block;
    // ユーザーの範囲選択操作を不可能にしている。つまりコピーできない。
    user-select: none;
    // 内側の余白指定。
    padding: 8px 7px 5px;
    // 色指定。
    background-color: #fff;
    color: #333333;
    // 角丸指定。
    border-radius: 8px 8px 0 0;
    // 文字間の隙間の指定。フォントサイズ同様, remで指定した。
    letter-spacing: .4rem;
    // badgeのpositionプロパティのため。
    position: relative;
}

// 各タブメニューがホバーされた時のアイコンのアニメーション指定。
.wrapper .main-area .content .content-area .tabMenu .planListTitle a:hover i {
    // 実際にホバーして挙動を確認してほしい。一回転させているだけ。
    transform: rotate(-360deg);
    // 以下の指定をhover側に書くことで，ホバーが外れた時にはtransitionが読み込まれないようにした。
    // こうすることでホバーが外れた際のアニメーションのイージングが0sになる。よって，一切回転していないように見える（実際には-360degから0degに変化しているが変化速度は0なので一切動いてないように見える）。
    transition: transform .5s;
}

// 以下の指定をすることで，クリックされた時にはアイコンのアニメーションが起こらないように制御している。一度以下の指定をコメントアウトして確認を。
.wrapper .main-area .content .content-area .tabMenu .planListTitle a:active i {
    // activeはクリック中。
    transition: none;
    transform: none;
}

// 以下の指定で，選択済みのタブメニューをホバーしてもアイコンのアニメーションが起こらないようになった。
.wrapper .main-area .content .content-area .tabMenu .planListTitle.active a:hover i {
    transform: none;
}

// 選択済みのタブメニューの色を変更している。
.wrapper .main-area .content .content-area .tabMenu .planListTitle.active a {
    background-color: #333333;
    color: #fff;
}

// 件数表示のためのバッチのコーディング。
.wrapper .main-area .content .content-area .tabMenu .planListTitle a .badge {
    // ポジショニング。
    position: absolute;
    top: -10px;
    left: calc(100% - 10px);
    display: inline-block;
    // 件数の可変に対応させるため。絶対値指定してしまうと，例えば件数の桁が増えた際にデザインが崩れてしまう。
    width: auto;
    // 角丸指定。
    border-radius: 50%;
    // 色指定。
    background-color: #FF4A52;
    color: white;
    // 左右の内側の余白を指定。
    padding: 0 4px;
    // フォントサイズの指定。16px×0.875=14px。
    font-size: .875rem;
    // フォントサイズに1.4倍した値が高さとなる（body{}にてline-heightを1にしている）。今回heightの代わりとして使用している。
    line-height: 1.4;
    // 親要素の方で値を指定していたので上書きしている（.wrapper .main-area .content .content-area .tabMenu .planListTitle a{}参照）。
    letter-spacing: normal;
    // バッチが隣のタブメニューと重なった際に必ず上に来るように指定した。念のため（正直いらない？）。
    z-index: 10; // 値はテキトー。とにかく大きい方が上に重なる。
}

// エラーメッセージのコーディング。
.wrapper .main-area .content .content-area .error-message {
    // ポジショニング。
    position: absolute;
    top: -42px;
    left: 62px;
    // 色指定。
    background-color: #FF4A52;
    color: #FFFAFB;
    // 内側の余白指定。
    padding: 5px;
    // 角丸指定。
    border-radius: 3px;
    // text-align: center; // 今回はposition指定をしているので要らない？（通常のブロックレベル要素であればテキスト自体を中央寄せにしたければtext-alignをつかうことになるが…）。
    // ユーザーの範囲選択操作を不可能にしている。つまりコピーできない。
    user-select: none;
    // 文字間の隙間の指定。
    letter-spacing: 3px;
    // 影指定。
    box-shadow: inset 0 0 5px 5px #FF4A60;
}

// 「仮」。「並べ替え」機能を検索フォームの上に設置しようと構想中。
.wrapper .main-area .content .content-area .provisional {
    // 色指定。
    background-color: #333333;
    color: #fff;
    // 角丸指定。右上・左上のみ作成。
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    // 内側の余白の指定。
    padding: 10px;
    // ユーザーの範囲選択操作を不可能にしている。つまりコピーできない。
    user-select: none;
    // 文字間の隙間の指定。
    letter-spacing: 3px;
}

//「検索」フォームのコーディング。
.wrapper .main-area .content .content-area form {
    // 色指定。
    background-color: #333333;
    color: #fff;
    // 上の「並び替え（暫定）」ボタンの方に角丸の指定を移した。
    // border-top-left-radius: 8px;
    // border-top-right-radius: 8px;
    // 内側の余白の指定。
    padding: 0 10px 10px;
    // ユーザーの範囲選択操作を不可能にしている。つまりコピーできない。
    user-select: none;
    // 文字間の隙間の指定。
    letter-spacing: 3px;
}

// 検索フォームの入力欄のコーディング。
.wrapper .main-area .content .content-area form input {
    // 横幅指定。
    width: 300px;
    // 色指定。
    background-color: #FFFAFB;
    color: #333;
    // 入力欄の内側の余白を指定。これを指定しないと入力する際，やや不便。コメントアウトして確認を。
    padding: 5px;
    // 角丸指定。
    border-radius: 4px;
}

// 検索フォームの送信ボタン（虫眼鏡）のコーディング。
.wrapper .main-area .content .content-area form button {
    // 色指定。
    color: #fff;
    // 微妙な位置調整のため。
    margin-left: 5px;
    // フォントサイズ指定。16px×1.125=18px。
    font-size: 1.125rem;
    // 文字間の隙間の指定。
    letter-spacing: 3px;
    // アニメーションの調整（イージング）。
    transition: transform .2s;
}

// 検索フォームの送信ボタン（虫眼鏡）のアニメーション指定。ホバーされた時。
.wrapper .main-area .content .content-area form button:not(.parent-balloon):hover {
    // 少し拡大。
    transform: scale(1.1);
}

// suspendList.blade.phpのみに関係するコーディング。「復元する」フォームのコーディング。
.wrapper .main-area .content .content-area .tr .FirstAid form {
    // 色指定。
    background-color: #555555;
    // 内側の余白指定。
    padding: 0;
    // 文字間の隙間の指定。
    letter-spacing: normal;
}

// suspendList.blade.phpのみに関係するコーディング。「復元する」ボタンのコーディング。重複したスタイル指定なのでいずれ修正を。
.wrapper .main-area .content .content-area .tr .FirstAid form button {
    // .wrapper .main-area .content .content-area form button{}のfont-size: 1.125rem;を上書きするため。コメントアウトして確認を。
    font-size: 1rem;
    // .wrapper .main-area .content .content-area form button{}のmargin-left: 5px;を上書きするため。
    margin-left: 0;
}

// 「復元する」ボタンのカスタマイズ。スラッシュアイコンとゴミ箱アイコンを重ねるため。
.wrapper .main-area .content .content-area .tr .FirstAid form button #slashIconParent {
    // margin-topを指定するため。
    display: block;
    // コメントアウトして確認を。若干縦軸のズレが生じてしまう（positionの影響？）。
    margin-top: 1px;
    // ポジショニングで必要。
    position: relative;
}

// 「復元する」ボタンのカスタマイズ。スラッシュアイコンとゴミ箱アイコンを重ねるため。
.wrapper .main-area .content .content-area .tr .FirstAid form button #slashIconParent #slashIcon {
    // スラッシュアイコンをゴミ箱アイコンの上に重ねている。
    position: absolute;
    left: -2px;
    // スラッシュアイコンのサイズ調整。16px×0.875=14px。
    font-size: .875rem;
}

.wrapper .main-area .content .content-area .table {
    // 色指定。
    background-color: #333333;
    color: #fff;
    // 角丸指定。右下と左下だけ。
    border-radius: 0 0 8px 8px;
    // tableタグはブロックレベル要素のようにデフォルトで親要素限界まで横幅を占有するわけではない。コメントアウトして確認を。
    width: 100%;
    // 内側の余白指定。
    padding: 0 10px 10px;
}

// 全てのtrタグに対してのコーディング。
.wrapper .main-area .content .content-area .table tbody tr {
    // 全てのtdタグを横並びに。
    display: flex;
    // 色指定。
    background-color: #555555;
    // 角丸指定。
    border-radius: 4px;
    // 内側の余白指定。
    padding: 5px;
    // 文字間の隙間の指定。
    letter-spacing: 2px;
}

// 隣接兄弟結合子。レコード間の隙間を指定している。
.wrapper .main-area .content .content-area .table tbody tr + tr {
    margin-top: 10px;
}

// アコーディオンのアニメーション。app.jsで制御している。
.wrapper .main-area .content .content-area .table tbody .tr.detailOpen {
    // 角丸指定。アコーディオンが開いている場合には，右下・左下の角丸を解除している。
    border-radius: 4px 4px 0 0;
}

// アコーディオン（計画概要）のコーディング。
.wrapper .main-area .content .content-area .table tbody #planDetailRow {
    // .wrapper .main-area .content .content-area .table tbody tr + tr{}のmargin-top: 10;を上書きするため。
    margin-top: 0;
    // はみ出しそうになったら自動で折り返してくれる機能を提供。コメントアウトして確認。
    word-break: break-all; // overflow-wrap: anywhere;でもOK。
    // デフォでは非表示。
    display: none;
    // 角丸指定。右下・左下のみ。
    border-radius: 0 0 4px 4px;
    // 区切り線を引くため。
    border-top: #ffffff solid 1px;
    // 行間の指定。範囲選択した際に，選択部分（青の部分）が重なるのを防ぐため。コメントアウトして確認を。
    line-height: 1.5;
    // transitionの代わり（イージングの指定）。キーフレーム（「slideDown」でファイル内検索してみて）。
    animation: .2s slideDown;
}

// アコーディオンのアイコンボタンがクリックされた時。app.js参照。
.wrapper .main-area .content .content-area .table tbody #planDetailRow.detailOpen {
    // 非表示➡表示。
    display: block;
}

// tdタグのコーディング。
.wrapper .main-area .content .content-area .table tbody tr td {
    /* テキストの位置調整のため。フレックスにするが縦並びに変更し，主軸（縦軸）に対して中央寄せ。*/
    /* これにより，テキストがど真ん中に配置される形になる（微々たる変化，気にならなければ「display: block;」に戻してOK）。*/
    display: flex;
    // フレックスアイテムの主軸の変更。
    flex-direction: column;
    // フレックスアイテムの配置を主軸に対して行う。
    justify-content: center;
}

// 隣接兄弟結合子。td間にmargin-leftを指定している。
.wrapper .main-area .content .content-area .table tbody tr td + td {
    margin-left: 45px;
}

// 応急処置。trace.blade.phpはtdの数の関係で空タグのtd（class="FirstAid"）を追加する必要があった。
// ＊ここはどうにかすべき。いつまでも空タグのtdで代用すべきではない。
.wrapper .main-area .content .content-area .table tbody tr #modalWindowOpen {
    // .wrapper .main-area .content .content-area .table tbody tr td + td{}のmargin-left: 45px;を上書きしている。
    margin-left: 0px;
}

// 応急処置。もし「空のtdタグ」問題が解消されない場合は，trace.blade.phpの先頭のtdタグ（class="tr"のtrタグ内の）からclass="FirstAid"を削除してindexとsuspendListの方ではclass="FirstAid"を追加する形でスタイル指定しよう。
.wrapper .main-area .content .content-area .table tbody tr .FirstAid {
    margin-right: 10px;
}

// アコーディオンのアイコンボタンのコーディング。
.wrapper .main-area .content .content-area .table tbody tr #planDetailButton {
    // .wrapper .main-area .content .content-area .table tbody tr td + td{}のmargin-left: 45px;を上書きしている。
    // autoにすることで残り全ての占有可能な領域をmargin-leftの値として分配している。コメントアウトして確認を。
    margin-left: auto;
    // ホバー時のマウスの形を変更。
    cursor: pointer;
}

// アコーディオンのアイコンボタンのアニメーション。
.wrapper .main-area .content .content-area .table tbody .tr #planDetailButton i {
    // アニメーションの調整（イージング）。
    transition: transform .2s;
}

// アコーディオンのアイコンボタンがクリックされた時。app.js参照。
.wrapper .main-area .content .content-area .table tbody .tr.detailOpen #planDetailButton i {
    // アイコンが反転する。
    transform: rotate(180deg);
}

// index.blade.phpのみ。「編集する」ボタンのコーディング。
.wrapper .main-area .content .content-area .table tbody tr td a {
    // 色指定。
    color: #fff;
}

// ツールチップのコーディング。ツールチップ（spanタグ）の親要素の指定。ヘッダー部分とメインコンテンツ部分両方とも以下の指定が必要。
.parent-balloon {
    // ポジショニングのため。
    position: relative;
}

// メインコンテンツのツールチップのコーディング。
.parent-balloon .balloon {
    // ポジショニング。
    position: absolute;
    top: -30px;
    left: -20px;
    // 通常時は非表示。
    display: none;
    // 内側の余白指定。
    padding: 7px;
    // 文字間の隙間の指定。
    letter-spacing: normal;
    // 色指定。
    color: #444444;
    background-color: #ffffff;
    // 角丸指定。
    border-radius: 5px;
    // 影指定。
    box-shadow: 2px 2px 2px 1px #333333;
    pointer-events: none;
}

// メインコンテンツのツールチップのコーディング続き。疑似要素を使用して「▽」を作成している。
.parent-balloon .balloon::before {
    // 中身はなし。「▽」の作成と関連。
    content: "";
    // ポジショニング。
    position: absolute;
    top: 97%;
    left: 20px;
    // 以下の指定で「▽」を作成している。「CSS border 三角」で検索。
    border: 6px solid transparent;
    border-top: 6px solid #ffffff;
}

// メインコンテンツのツールチップのアニメーション指定。アイコンがホバーされた時。
.parent-balloon:hover .balloon {
    // 非表示➡表示。
    display: inline-block;
    // 横幅指定。コメントアウトして確認。文字数に応じてそれぞれ微調整が必要。
    width: 78px;
}

// レコードが0の場合に表示される文言のコーディング。適宜改良が必要。
.wrapper .main-area .content .content-area .alt {
    // 色指定。
    background-color: #333333;
    color: #fff;
}

// ページトップへ遷移するボタンのコーディング。
.wrapper #to_top {
    // 包含ブロックがページ全体になっている点に注意。親要素にposition: relative;を指定しないパターン。
    position: fixed; // ポジショニング。ページ全体に対しての位置指定。
    bottom: 10px;
    right: 10px;
    // 色指定。
    color: #333333;
    background-color: #fff;
    // アイコンの型抜き。コメントアウトして確認してみてほしい。
    border-radius: 50%;
    // スクロールされてヘッダー部分が画面から見えなくなるまでは完全透明にしている。
    opacity: 0;
    // アニメーションの調整（イージング）。
    transition: opacity .3s;
}

// ページトップへ遷移するボタンのアニメーション。スクロールされてヘッダー部分が完全に画面から見えなくなった時。app.js参照。
.wrapper #to_top.scrolled {
    // 完全透明➡不透明。
    opacity: 1;
}

// ページトップへ遷移するボタン（アイコン）の大きさ指定。
.wrapper #to_top i {
    // アイコンの大きさはフォントサイズで調整する。16px×2=32px。
    font-size: 2rem;
}

// 全アコーディオンを開閉するボタンのコーディング。
.wrapper #AllplanDetailButton {
    // 包含ブロックがページ全体になっている点に注意。親要素にposition: relative;を指定しないパターン。
    position: fixed; // ポジショニング。ページ全体に対しての位置指定。
    bottom: 60px;
    right: 10px;
    // 色指定。
    color: #fff;
    background-color: #333;
    // 内側の余白指定。縦横両方とも32pxになるようにfont-sizeの値を変更しながら微調整を行った。
    padding: 5.015px 6.9px 5.665px;
    // アイコンの型抜き。コメントアウトして確認してみてほしい。
    border-radius: 50%;
    // ホバー時のマウスの形を変更。
    cursor: pointer;
    // スクロールされてヘッダー部分が画面から見えなくなるまでは完全透明にしている。
    opacity: 0;
    // アニメーションの調整（イージング）。
    transition: opacity .3s;
}

// 全アコーディオンを開閉するボタンのアニメーション。スクロールされてヘッダー部分が完全に画面から見えなくなった時。app.js参照。
.wrapper #AllplanDetailButton.scrolled {
    opacity: 1;
}

// 全アコーディオンを開閉するボタン（アイコン）の大きさ指定。
.wrapper #AllplanDetailButton i {
    // アイコンの大きさを調整。縦横両方とも32pxになるようにpaddingの値を変更しながら微調整した。
    font-size: 1.3rem;
}

// 右側のサイドパネルボタンのコーディング。
.wrapper #sub-left-panel-button {
    // 包含ブロックがページ全体になっている点に注意。親要素にposition: relative;を指定しないパターン。
    position: fixed; // ポジショニング。ページ全体に対しての位置指定。
    bottom: 110px;
    right: 10px;
    // 色指定。
    color: #fff;
    background-color: #333;
    // 内側の余白指定。縦横両方とも32pxになるようにfont-sizeの値を変更しながら微調整を行った。
    padding: 5.015px 8.2px 5.665px;
    // アイコンの型抜き。コメントアウトして確認してみてほしい。
    border-radius: 50%;
    // ホバー時のマウスの形を変更。
    cursor: pointer;
    // スクロールされてヘッダー部分が画面から見えなくなるまでは完全透明にしている。
    opacity: 0;
    // アニメーションの調整（イージング）。
    transition: opacity .3s;
}

// 右側のサイドパネルボタンのアニメーション。スクロールされてヘッダー部分が完全に画面から見えなくなった時。app.js参照。
.wrapper #sub-left-panel-button.scrolled {
    opacity: 1;
}

// 右側のサイドパネルボタン（アイコン）の大きさ指定。
.wrapper #sub-left-panel-button i {
    font-size: 1.3rem;
    // アニメーションの調整（イージング）。
    transition: transform .2s;
}

.wrapper #sub-left-panel-button.open i {
    // アイコンの向きが180度変化する。
    transform: rotate(180deg);
}

// モーダルウインドウここから。

// マスク部分のコーディング。
.wrapper #mask {
    // 背景色の指定。若干透明にしている。
    background: rgba(0, 0, 0, 0.6);
    // positionをfixedに，topとleft,right,bottomを全て0にすることでマスク部分を作っている。
    position: fixed;
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    // 要素の重なり順を指定している。
    // .wrapper .main-area .content .content-area .tabMenu .planListTitle a .badge{}のz-index: 10;より大きい値を指定する必要がある。
    z-index: 50;  // 試しにコメントアウトして確認してみよう。確かにhtml構造上一番下にあるので一切のz-index指定がない状態であれば問題なく上に重なって表示される。
}

// マスク部分のコーディング続き。app.js参照。
.wrapper #mask.hidden {
    // 通常時は以下の指定を読み込む（表示されない）が，例えば「完了する」ボタンがクリックされた時にはclass="hidden"が外されるので表示される。
    display: none;
}

// 「完了する」「削除する」ボタン（ダミー）がクリックされると，マスク部分とともにモーダルウインドウ部分が表示される。
.wrapper #modalWindow {
    // 色指定。
    background: #fff;
    // 横幅指定。
    width: 300px;
    // 内側の余白指定。
    padding: 20px;
    // 角丸指定。
    border-radius: 4px;
    // fixedを指定。親要素（厳密には包含ブロック）はページ全体となる。
    position: fixed; // ページ全体を基準にポジショニング。
    top: 100px;
    left: 0;
    right: 0;
    /* width，left，rightの全てがautoでなく（leftとrightは0），かつmargin-right，margin-leftがともにautoである場合には，左右のmarginが等しくなるようにmarginが設定される，らしい（CSSの仕様）。 */
    /* この際，topは左右と関係ないのでどのような値であっても問題なし。 */
    margin: 0 auto;
    // 要素の重なり順を調整。モーダルウインドウ部分を一番上に配置するため。その次にマスク部分。
    z-index: 100;
    // class="hidden"が取り外されている時は，表示。app.jsで制御している。
    display: block;
}

//「完了する」「削除する」ボタン（ダミー）がクリックされる前。app.js参照。
.wrapper #modalWindow.hidden {
    // class="hidden"が付いている時は，非表示。
    display: none;
}

// サブのモーダルウインドウここから。
.wrapper #subModalWindow {
     // 色指定。
     background: #fff;
     // 横幅指定。
     width: 500px;
     height: 500px;
     // 内側の余白指定。
     padding: 8px;
     // 角丸指定。
     border-radius: 4px;
     // fixedを指定。親要素（厳密には包含ブロック）はページ全体となる。
     position: fixed; // ページ全体を基準にポジショニング。
     top: 30px;
     left: 0;
     right: 0;
     /* width，left，rightの全てがautoでなく（leftとrightは0），かつmargin-right，margin-leftがともにautoである場合には，左右のmarginが等しくなるようにmarginが設定される，らしい（CSSの仕様）。 */
     /* この際，topは左右と関係ないのでどのような値であっても問題なし。 */
     margin: 0 auto;
     // 要素の重なり順を調整。モーダルウインドウ部分を一番上に配置するため。その次にマスク部分。
     z-index: 100;
     // class="hidden"が取り外されている時は，表示。app.jsで制御している。
     display: block;
}
// デフォではclass="hidden"がついているが，「編集する」ボタンを押下するとJavaScriptの処理で以下が読み込まれなくなる。
.wrapper #subModalWindow.hidden {
    display: none;
}
.wrapper .main-area .content .content-area #subModalWindow form {
    // 内側の余白指定。
    padding-bottom: 10px;
    // 角丸指定。
    border-radius: 4px;
}
.wrapper .main-area .content .content-area #subModalWindow form#task-delete-form {
    // 背景色を透明にしている。本命の「削除」ボタンはユーザーが視認できずかつクリック出来ないように配慮してスタイル指定している。
    background: transparent; // コメントアウトして挙動確認を。
}
.wrapper .main-area .content .content-area #subModalWindow form button#task-delete {
    // 本命の「削除」ボタンを完全透明にし，範囲選択を禁止し，クリックをできないようにしている。ユーザーが視認できずかつクリック出来ないように配慮するため。
    opacity: 0;
    user-select: none;
    pointer-events: none;
}
.wrapper .main-area .content .content-area #subModalWindow .form-label {
    // 横幅一杯まで占有するため。
    display: block;
    // 範囲選択できなくしている。
    user-select: none;
    // 外側の余白指定。
    margin-top: 15px;
}
.wrapper .main-area .content .content-area #subModalWindow .form-input {
    // 横幅一杯まで占有するため。
    display: block;
    // 横幅指定。絶対値の指定でも構わないが，概要欄が大きくなりすぎる可能性があるので親要素内に収める必要がある。デベロッパーツールで数値を変えて確認を。
    width: 100%;
    // 色指定。
    color: #fff;
    background-color: #555555;
    // 内側の余白指定。
    padding: 8px;
    // 角丸指定。
    border-radius: 4px;
    // 外側の余白指定。
    margin: 5px 0;
    line-height: 1.5;
}
.wrapper .main-area .content .content-area #subModalWindow .form-input::placeholder {
    // プレイスホルダーの色指定。「::placeholder」のように記述すること。
    color: rgba(255,255,255,0.7);
}
.wrapper .main-area .content .content-area #subModalWindow .form-input.textarea-input{
    // 概要の高さを指定。
    height: 150px;
}
.wrapper .main-area .content .content-area #subModalWindow form #update-button {
    // 上記のスタイル指定の打消しを行っている。
    transition: none;
    // 上記のスタイル指定の打消しを行っている。
    margin-left: 0px;
    margin-top: 15px;
    letter-spacing: normal;
    // 背景色の指定。
    background-color:#5588BB;
    // 内側の余白指定。
    padding: 8px;
    // 角丸指定。
    border-radius: 4px;
}
.wrapper .main-area .content .content-area #subModalWindow form #update-button:hover {
    // 上記のスタイル指定の打消しを行っている。
    transform: none;
}
// デコイの「削除する」ボタンのコーディング。
.wrapper .main-area .content .content-area #subModalWindow form #task-delete-decoying {
    // position指定のため。親要素は「.wrapper .main-area .content{}」となる（ページ内検索で確認してみよう）。
    position: absolute;
    // bottomの指定は「戻る」ボタンの値を一致させよう。フレックスで「更新する」と「削除する」，「戻る」を並列させようと考えたが今回はpositionを使用した。
    bottom: 18.2px;
    left: 150px;
    // 色指定。
    color: #fff;
    background-color: #FF4A52;
    // 内側の余白指定。
    padding: 8px;
    // 角丸指定。
    border-radius: 4px;
    // フォントサイズの指定。
    font-size: 1.125rem;
    // ホバー時のマウスの形の指定。
    cursor: pointer;
}
.wrapper .main-area .content .content-area #subModalWindow form #return-button {
    // position指定のため。親要素は「.wrapper .main-area .content{}」となる（ページ内検索で確認してみよう）。
    position: absolute;
    // bottomの指定は「削除する」ボタンの値を一致させよう。フレックスで「更新する」と「削除する」，「戻る」を並列させようと考えたが今回はpositionを使用した。
    bottom: 18.2px;
    left: 290px;
    // 色指定。
    color: #fff;
    background-color: #555555;
    // 内側の余白指定。
    padding: 8px;
    // 角丸指定。
    border-radius: 4px;
    // フォントサイズの指定。
    font-size: 1.125rem;
    // ホバー時のマウスの形の指定。
    cursor: pointer;
}
.wrapper .main-area .content .content-area #subModalWindow .error-message {
    // エラーメッセージの指定。別のエラーメッセージのposition指定を解除している。
    position: relative;
    top: 0;
    left: 0;
}
// サブのモーダルウインドウここまで。

// モーダルウインドウ部分の中身のコーディング。
.wrapper .main-area .content .content-area #modalWindow div {
    // 「キャンセル」と「削除（ないし完了）」ボタンを横並びに。
    display: flex;
}

// モーダルウインドウ部分の中身のコーディング続き。
.wrapper .main-area .content .content-area #modalWindow p {
    // 注意書きのコーディング。
    margin-bottom: 15px; // 外側の余白の指定。
    letter-spacing: 2px; // 文字間の隙間の指定。
    color: #333; // 色指定。
}

// モーダルウインドウ部分の中身のコーディング続き。
.wrapper .main-area .content .content-area #modalWindow div span {
    // 「キャンセル」ボタンのコーディング。
    display: block; // 上下の余白を指定するため（padding）。
    margin-left: auto; // justify-contentを代わりに指定してもOK。分配可能な余白を全て「キャンセル」ボタンのmargin-leftに割り当てることで右寄せを実現。
    padding: 6px; // 内側の余白指定。
    // 色指定。
    color: #333;
    background-color: #E8F2F0;
    // 角丸指定。
    border-radius: 4px;
    // 文字間の隙間の指定。
    letter-spacing: normal;
    // ホバー時のマウスの形を変更。
    cursor: pointer;
}

// モーダルウインドウ部分の中身のコーディング続き。
.wrapper .main-area .content .content-area #modalWindow div form {
    // 「完了」「削除」ボタンのコーディング。
    padding: 0; // .wrapper .main-area .content .content-area form{}のpadding指定を上書きするため。
    background-color: #FF4A52; // 色指定。なお「完了」ボタンに関してはhtmlの方で別の背景色を指定している。
    border-radius: 4px; // 角丸指定。
    margin-left: 14px; // 外側の余白指定。
}

// モーダルウインドウ部分の中身のコーディング続き。
.wrapper .main-area .content .content-area #modalWindow div form button {
    // 「完了」「削除」ボタンのコーディング続き。
    color: #fff;
    // 文字間の隙間の指定。
    letter-spacing: normal;
    // 内側の余白指定。
    padding: 6px;
    // .wrapper .main-area .content .content-area form button{}のfont-size: 1.125rem;を上書きするため。
    font-size: 1rem;
    // .wrapper .main-area .content .content-area form button{}のmargin-left: 5px;を上書きするため。
    margin: 0;
}

// .wrapper .main-area .content .content-area form button:not(.parent-balloon):hover{}のtransform: scale(1.1);を上書きするため。
.wrapper .main-area .content .content-area #modalWindow div form button:hover {
    // アニメーションを無効にしている。
    transform: none;
}

// 「完了する」「削除する」ボタン（ダミー）にホバーされた時にマウスの形を変更。
.wrapper #modalWindowOpen {
    cursor: pointer;
}

// 「正常に動作しました」メッセージの表示と自動透過機能の実装。
.wrapper #success-msg {
    // ポジショニング。
    position: absolute;
    top: 20px;
    // leftとrightを0に，widthを絶対値指定した上でmarginの左右をautoにすると，中央寄せになる。
    left: 0;
    right: 0;
    // 横幅指定。
    width: 300px;
    // 内側の余白指定。
    padding: 10px 10px;
    // 中央寄せ。
    margin: 0 auto;
    // フォントサイズ指定。
    font-size: 1.375rem;
    // テキストを中央揃えにしている。
    text-align: center;
    // 色指定。
    color: #fff;
    background-color: #00A690;
    // 角丸指定。
    border-radius: 4px;
    // 要素の重なりを一番上にしている。
    z-index: 1000;
    // イージング。
    transition: opacity 0.3s;
}
// 「正常に動作しました」メッセージ表示後に2.5秒後に読み込まれる。app.jsにて「2.5秒」と検索。
.wrapper #success-msg.none {
    // 完全透明にし，範囲選択を禁止にし，クリックできないようにしている。
    opacity: 0;
    pointer-events: none;
    user-select: none;
}
.wrapper #success-msg #success-msg-icon {
    font-size: 2rem;
}

// モーダルウインドウここまで。

// ページネーション部分。bootstrap-4.blade.php或いはデベロッパーツールにてhtml構造を参照してほしい。
.pagination {
    // ページネーションリンクを横並びにしている。
    display: flex;
}

.pagination .page-item {
    // ページネーション上部に隙間を作っている。
    margin-top: 10px;
}

// 隣接兄弟結合子。
.pagination .page-item + .page-item {
    // ページネーションリンク間に隙間を作っている。
    margin-left: 15px;
}

// 現在ページの番号と一致していないページネーションリンクのUI。
.pagination .page-item .page-link {
    display: block;
    padding: 6px 8px;
    height: 100%;
    color: #555555;
}

// 現在ページの番号と一致していないページネーションリンクがホバーされた時。
.pagination .page-item .page-link:hover {
    // 下線を表示させている。
    border-bottom: #555555 solid 2px;
    // 下線の高さ分を差し引いたpadding-bottomを新たに指定している。コメントアウトして確認を。
    padding-bottom: 4px;
}

// 現在ページの番号と一致しているページネーションリンク（リンクとしての機能はなし）のUI。
.pagination .page-item#match .page-link {
    color: #fff;
    background-color: #555555;
    border-radius: 50%;
}

// ホバーされた時に下線を表示させないため。
.pagination .page-item#match .page-link:hover,
.pagination .page-item#threeDots .page-link:hover,
.pagination .page-item .page-link#leftTriangle:hover,
.pagination .page-item .page-link#rightTriangle:hover {
    border-bottom: none;
}

// キーフレーム。
// display: none;からdisplay: block;に変化する時にアニメーションを付けたい場合にはanimationプロパティを使う必要がある。
// 理由⇒transitionプロパティは変化前と変化後の状態がDOMツリー上に存在することが必須だが，display: none;の場合はDOMツリーからは除外されている（変化前の状態が保持されない）ので使用できない。代わりにanimationプロパティを使用する必要がある。
@keyframes slideDown {
    0% {
        transform: translateY(-10px);
        opacity: 0;
    }
    100% {
        // translateY(-10px)➡translateY(0)。
        transform: none;
        opacity: 1;
    }
}

// メインコンテンツここまで。

@media (max-width: 600px) {
    .header .header-site-menu nav ul {
        // SP画面では非表示にする。
        display: none;
    }

    .header .header-site-menu .header-hamburger-menu {
        // SP画面ではハンバーガーメニューボタンを表示させる。
        display: block;
    }
}